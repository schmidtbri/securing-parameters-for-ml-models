components:
  schemas:
    Age:
      description: How old are you?
      enum:
      - EIGHTEEN_TO_TWENTY_FOUR
      - TWENTY_FIVE_TO_TWENTY_NINE
      - THIRTY_TO_THIRTY_FOUR
      - THIRTY_FIVE_TO_THIRTY_NINE
      - FORTY_TO_FORTY_FOUR
      - FORTY_FIVE_TO_FORTY_NINE
      - FIFTY_TO_FIFTY_FOUR
      - FIFTY_FIVE_TO_FIFTY_NINE
      - SIXTY_TO_SIXTY_FOUR
      - SIXTY_FIVE_TO_SIXTY_NINE
      - SEVENTY_TO_SEVENTY_FOUR
      - SEVENTY_FIVE_TO_SEVENTY_NINE
      - EIGHTY_OR_OLDER
      title: Age
      type: string
    DiabetesRisk:
      description: Risk of diabetes.
      enum:
      - NO_DIABETES
      - DIABETES
      title: DiabetesRisk
      type: string
    DiabetesRiskModelInput:
      properties:
        age:
          allOf:
          - $ref: '#/components/schemas/Age'
          description: How old are you?
        body_mass_index:
          description: Body Mass Index.
          maximum: 60.0
          minimum: 15.0
          title: Body Mass Index
          type: integer
        general_health:
          allOf:
          - $ref: '#/components/schemas/GeneralHealth'
          description: How would you say that in general your health is?
        income:
          allOf:
          - $ref: '#/components/schemas/Income'
          description: What is your income?
      title: DiabetesRiskModelInput
      type: object
    DiabetesRiskModelOutput:
      description: Diabetes risk model output.
      properties:
        diabetes_risk:
          $ref: '#/components/schemas/DiabetesRisk'
      required:
      - diabetes_risk
      title: DiabetesRiskModelOutput
      type: object
    Error:
      description: Error details.
      properties:
        messages:
          description: List of error messages.
          items:
            type: string
          title: Messages
          type: array
        type:
          description: The type of error.
          title: Type
          type: string
      required:
      - type
      - messages
      title: Error
      type: object
    GeneralHealth:
      description: How would you say that in general your health is?
      enum:
      - EXCELLENT
      - VERY_GOOD
      - GOOD
      - FAIR
      - POOR
      title: GeneralHealth
      type: string
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    HealthStatus:
      description: Health status of the service.
      enum:
      - HEALTHY
      - NOT_HEALTHY
      - UNKNOWN
      title: HealthStatus
      type: string
    HealthStatusResponse:
      description: Health status response.
      properties:
        health_status:
          allOf:
          - $ref: '#/components/schemas/HealthStatus'
          description: Health status of the service.
      required:
      - health_status
      title: HealthStatusResponse
      type: object
    Income:
      description: What is your income?
      enum:
      - LESS_THAN_10K
      - BETWEEN_10K_AND_15K
      - BETWEEN_15K_AND_20K
      - BETWEEN_20K_AND_25K
      - BETWEEN_25K_AND_35K
      - BETWEEN_35K_AND_50K
      - BETWEEN_50K_AND_75K
      - SEVENTY_FIVE_THOUSAND_OR_MORE
      title: Income
      type: string
    ModelDetails:
      description: Metadata of a model.
      properties:
        description:
          description: The description of the model.
          title: Description
          type: string
        display_name:
          description: The display name of the model.
          title: Display Name
          type: string
        qualified_name:
          description: The qualified name of the model.
          title: Qualified Name
          type: string
        version:
          description: The version of the model.
          title: Version
          type: string
      required:
      - display_name
      - qualified_name
      - description
      - version
      title: ModelDetails
      type: object
    ModelDetailsCollection:
      description: Collection of model details.
      properties:
        models:
          description: Collection of model details.
          items:
            $ref: '#/components/schemas/ModelDetails'
          title: Models
          type: array
      required:
      - models
      title: ModelDetailsCollection
      type: object
    ModelMetadata:
      description: Metadata of a model, includes all information in ModelDetails plus
        input and output schemas of the model.
      properties:
        description:
          description: The description of the model.
          title: Description
          type: string
        display_name:
          description: The display name of the model.
          title: Display Name
          type: string
        input_schema:
          description: Input schema of a model, as a JSON Schema object.
          title: Input Schema
          type: object
        output_schema:
          description: Output schema of a model, as a JSON Schema object.
          title: Output Schema
          type: object
        qualified_name:
          description: The qualified name of the model.
          title: Qualified Name
          type: string
        version:
          description: The version of the model.
          title: Version
          type: string
      required:
      - display_name
      - qualified_name
      - description
      - version
      - input_schema
      - output_schema
      title: ModelMetadata
      type: object
    ReadinessStatus:
      description: Readiness status of the service.
      enum:
      - ACCEPTING_TRAFFIC
      - REFUSING_TRAFFIC
      - UNKNOWN
      title: ReadinessStatus
      type: string
    ReadinessStatusResponse:
      description: Readiness status response.
      properties:
        readiness_status:
          allOf:
          - $ref: '#/components/schemas/ReadinessStatus'
          description: Readiness status of the service.
      required:
      - readiness_status
      title: ReadinessStatusResponse
      type: object
    StartupStatus:
      description: Startup status of the service.
      enum:
      - STARTED
      - NOT_STARTED
      - UNKNOWN
      title: StartupStatus
      type: string
    StartupStatusResponse:
      description: Startup status response.
      properties:
        startup_status:
          allOf:
          - $ref: '#/components/schemas/StartupStatus'
          description: Startup status of the service.
      required:
      - startup_status
      title: StartupStatusResponse
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
info:
  title: Diabetes Risk Model Service
  version: 0.1.0
openapi: 3.0.2
paths:
  /:
    get:
      description: Root of API, redirects to the /docs endpoint.
      operationId: get_root__get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Root
  /api/health:
    get:
      description: 'Check on service health.


        Indicates whether the service process is running. This endpoint will return
        a 200 status once the service

        has started.'
      operationId: health_check_api_health_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatusResponse'
          description: Successful Response
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatusResponse'
          description: Service Unavailable
      summary: Health Check
  /api/health/ready:
    get:
      description: 'Check on service readiness.


        Indicates whether the service is ready to respond to requests. This endpoint
        will return a 200 status only if

        all the models and decorators have finished being instantiated without errors.
        Once the models and decorators

        are loaded, the readiness check will always return a ACCEPTING_TRAFFIC state.'
      operationId: readiness_check_api_health_ready_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessStatusResponse'
          description: Successful Response
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessStatusResponse'
          description: Service Unavailable
      summary: Readiness Check
  /api/health/startup:
    get:
      description: 'Check on service startup.


        Indicates whether the service is started. This endpoint will return a 200
        status only if all the models

        and decorators have finished being instantiated without errors.'
      operationId: startup_check_api_health_startup_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartupStatusResponse'
          description: Successful Response
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartupStatusResponse'
          description: Service Unavailable
      summary: Startup Check
  /api/models:
    get:
      description: 'List of models available.


        This endpoint returns details about all the models currently loaded in the
        service, however not all models

        necessarily have an endpoint created for them.'
      operationId: get_models_api_models_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelDetailsCollection'
          description: Successful Response
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get Models
  /api/models/diabetes_risk_model/prediction:
    post:
      description: Model to predict the diabetes risk of a patient.
      operationId: PredictionController_api_models_diabetes_risk_model_prediction_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiabetesRiskModelInput'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiabetesRiskModelOutput'
          description: Successful Response
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Predictioncontroller
  /api/models/{model_qualified_name}/metadata:
    get:
      description: 'Return metadata about a single model.


        This endpoint returns metadata about any of the models currently loaded in
        the service, however not all models

        necessarily have an endpoint created for them.'
      operationId: get_model_metadata_api_models__model_qualified_name__metadata_get
      parameters:
      - in: path
        name: model_qualified_name
        required: true
        schema:
          title: Model Qualified Name
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelMetadata'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get Model Metadata
